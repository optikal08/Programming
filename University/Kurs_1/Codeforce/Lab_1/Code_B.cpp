
#include <cmath>
#include <iostream>
using namespace std;

// Блюда

// Евлампий собирается готовить себе обед. В состав его обеда входят три блюда. Можете считать, что это первое, второе и десерт.

// С точки зрения Евлампия приготовление блюда состоит из двух фаз. Первая фаза требует активного участия Евлампия (например, он режет овощи), а во время второй фазы какое-либо вмешательство не требуется (например, овощи тушатся на сковороде под крышкой): в это время Евлампий может заниматься приготовлением другого блюда.

// Евлампий хотел бы сначала всё приготовить и только потом приступить к трапезе.

// Он может готовить блюда в любом порядке. Главное, чтобы при приготовлении каждого блюда первая фаза всегда предшествовала второй.

// Считайте, что он приступает к приготовлению обеда в момент времени 0. Для каждого из трёх блюд известно время, которое будет потрачено на первую и на вторую фазы приготовления.

// Ваша задача — определить самый ранний момент времени, в который Евлампий сможет приступить к трапезе.

// Входные данные
// Входные данные содержат 6 целых чисел по одному в строке. Все числа положительные и не превосходят 106.

// В первой строке содержится число 𝑝1 — время первой фазы приготовления для первого блюда.

// Во второй строке содержится число 𝑝2 — время второй фазы приготовления для первого блюда.

// В третьей строке содержится число 𝑠1 — время первой фазы приготовления для второго блюда.

// В четвёртой строке содержится число 𝑠2 — время второй фазы приготовления для второго блюда.

// В пятой строке содержится число 𝑡1 — время первой фазы приготовления для десерта.

// В шестой строке содержится число 𝑡2 — время второй фазы приготовления для десерта.

// Выходные данные
// Выведите единственное целое число — наиболее ранний момент времени, в который Евлампий сможет приступить к трапезе.

int main() {
    int p1, p2, s1, s2, t1, t2, max1f2, max2f2, max3f2, max1f1, max2f1, max3f1, v1, v2, v3;
    cin >> p1 >> p2 >> s1 >> s2 >> t1 >> t2;

    if (p2 >= s2 && p2 >= t2) {
        max1f2 = p2;
        max1f1 = p1;
        if (s2 >= t2) {
            max2f2 = s2;
            max2f1 = s1;
            max3f2 = t2;
            max3f1 = t1;
        } else {
            max2f2 = t2;
            max2f1 = t1;
            max3f2 = s2;
            max3f1 = s1;
        }
    } else if (s2 >= p2 && s2 >= t2) {
        max1f2 = s2;
        max1f1 = s1;
        if (p2 >= t2) {
            max2f2 = p2;
            max2f1 = p1;
            max3f2 = t2;
            max3f1 = t1;
        } else {
            max2f2 = t2;
            max2f1 = t1;
            max3f2 = p2;
            max3f1 = p1;
        }
    } else if (t2 >= p2 && t2 >= s2) {
        max1f2 = t2;
        max1f1 = t1;
        if (p2 >= s2) {
            max2f2 = p2;
            max2f1 = p1;
            max3f2 = s2;
            max3f1 = s1;
        } else {
            max2f2 = s2;
            max2f1 = s1;
            max3f2 = p2;
            max3f1 = p1;
        }
    }

    v1 = max1f1 + max1f2;
    v2 = max1f1 + max2f1 + max2f2;
    v3 = max1f1 + max2f1 + max3f1 + max3f2;
    if (v1 >= v2 && v1 >= v3) {
        cout << v1;
    }
    if (v2 >= v1 && v2 >= v3) {
        cout << v2;
    }
    if (v3 >= v1 && v3 >= v2) {
        cout << v3;
    }
}
/*if (p2 >= s1) {
        if (s2 >= t2) {
            max1f2 = p2;
            max1f1 = p1;
            max2f2 = s2;
            max2f1 = s1;
            max3f2 = t2;
            max3f1 = t1;
        }
        else if (p2 >= t2) {
            max1f2 = p2;
            max1f1 = p1;
            max2f2 = t2;
            max2f1 = t1;
            max3f2 = s2;
            max3f1 = s1;
        }
        else if (p2 <= t2) {
            max1f2 = t2;
            max1f1 = t1;
            max2f2 = p2;
            max2f1 = p1;
            max3f2 = s2;
            max3f1 = s1;
        }
    }
    else if (p2 <= s2) {
        if (p2 >= t2) {
            max1f2 = s2;
            max1f1 = s1;
            max2f2 = p2;
            max2f1 = p1;
            max3f2 = t2;
            max3f1 = t1;
        }
        else if (s2 >= t2) {
            max1f2 = s2;
            max1f1 = s1;
            max2f2 = t2;
            max2f1 = t1;
            max3f2 = p2;
            max3f1 = p1;
        }
        else if (s2 <= t2) {
            max1f2 = t2;
            max1f1 = t1;
            max2f2 = s2;
            max2f1 = s1;
            max3f2 = p2;
            max3f1 = p1;
        }
    }
*/
